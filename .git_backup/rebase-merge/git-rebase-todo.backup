pick 3a695dc8ce21dc2df2e0f4f276fe707626c0801c Tus cambios antes del rebase
pick 21fcda6bbbf30dbb3e448a9067b79be74c3e521f Tus cambios antes del rebase
pick 856a1060a353c969cc8c15bafc0e66e0cb1b1654 Tus cambios antes del rebase
pick ca8f548366908c73f6ba318bec65b0566175fe09 ExportSicom
pick 2502681198dd254e9862f95bd7a509c0d80deb78 ExportSicom
pick 2d1c64f81bc01b0974000c548bd2414938126d68 App Expo

# Rebase 756541e..2d1c64f onto 756541e (6 commands)
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
#                    commit's log message, unless -C is used, in which case
#                    keep only this commit's message; -c is same as -C but
#                    opens the editor
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
#         create a merge commit using the original merge commit's
#         message (or the oneline, if no original merge commit was
#         specified); use -c <commit> to reword the commit message
# u, update-ref <ref> = track a placeholder for the <ref> to be updated
#                       to this position in the new commits. The <ref> is
#                       updated at the end of the rebase
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
